#ifndef Points_hh
#define Points_hh

class Points
{
public:
    
    Points(int num_points);
    
private:
    
    int num_points_;

    vector<double> data_;

    class KD_Adaptor
    {
    public:
        
        KD_Adaptor(Points const &points);
        
        inline int kdtree_get_point_count() const
        {
            return rbf_mesh_.number_of_points();
        }

        inline double kdtree_get_pt(const int idx, int dim) const
        {
            return rbf_mesh_.basis_functions_[idx]->position()[dim];
        }

        inline double kdtree_distance(const double *p1, const int idx_p2, int size)
        {
            vector<double> const p1_vec(p1, p1 + size);
        
            return rbf_mesh_.basis_functions_[idx]->get_distance_squared(p1_vec);
        }
        
        template <class BBOX>
        bool kdtree_get_bbox(BBOX &/*bb*/) const
        {
            return false;
        }
        
    private:
        
        RBF_Mesh const &rbf_mesh_;
    }
};

#endif
